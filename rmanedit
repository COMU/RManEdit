#!/usr/bin/ruby
#encoding: UTF-8
require 'gtk2'
require 'webkit'
require 'filemagic'
require 'zlib'
require 'zip/zip'
require '~/.config/rmanedit/lang'
require 'rubygems'
require 'utils'
require 'textView'
require 'add_remove_tab'

class Editor 

  include GetText
  bindtextdomain("rmanedit")
  GetText.set_locale_all(LANGUAGE)
  INDEX = 0
  attr_accessor :data

  def initialize
    @win = Gtk::Window.new
    @editor = Gtk::TextView.new
    @tab = Gtk::Notebook.new
    @tab.scrollable = true
    # birden fazla yerde kullanildigindan burada tanimlandi
    @treeview = Gtk::TreeView.new
    @renderer = Gtk::CellRendererText.new
    @win.set_icon("/usr/share/pixmaps/images/logo.jpg")
    @win.set_size_request(900,500)
    @win.set_resizable(true)
    @win.set_title("RManEdit")
    @win.signal_connect('delete_event'){files_save?}
    @win.signal_connect('destroy'){Gtk.main_quit}
    @win.set_window_position(Gtk::Window::POS_CENTER)
    win_contain
    @win.show_all()
  end
  
  def treeView_create
    column   = Gtk::TreeViewColumn.new(_("Category"), @renderer,  :text => INDEX)
    @treeview.sensitive=false
    @treeview.append_column(column)
    list = Array.new
    list = ["NAME", "SYNOPSIS","AVAILABILITY","DESCRIPTION","OPTIONS",
    "EXAMPLES","NOTES", "MESSAGES AND EXIT CALLS","AUTHOR","HISTORY",
    "RESOURCES","FILES","BUGS","CAVEATS","SEE ALSO"]
    store = Gtk::ListStore.new(String)
    list.each_with_index do |e, i|
      iter = store.append
      iter[INDEX] = list[i]
    end
    @treeview.model = store
    @treeview.signal_connect("cursor-changed"){selection = @treeview.selection;
    iter = selection.selected; o = Utils.new; o.label_find(iter[0],@tab)}     
  end
   
  def man_view
    @manview = WebKit::WebView.new
    swinman_view = Gtk::ScrolledWindow.new
    no_man_file = _("Nothing to preview")
    content = "<html><head><h2> #{no_man_file}</h2></head></HTML>"
    @manview.load_string(content,"text/html", "UTF-8", "file://home")
    # man goruntusu icin scrollWind 
    swinman_view.add(@manview)
    swinman_view.set_size_request(300,500)
    return swinman_view
  end

  def win_contain
      @vbox = Gtk::VBox.new(false, 2)
      @hbox = Gtk::HBox.new(false, 2)
      hpaned = Gtk::HPaned.new
      hpaned2 = Gtk::HPaned.new
      hpaned.set_size_request(900, -1) 
      hpaned2.set_size_request(800, 500)
      @win.set_size_request(900, 500)
      @win.set_resizable(true)
      @vbox.pack_start(menuBar, false, false, 0)
      @vbox.pack_start(toolBar, false, false, 0)
      @vbox.pack_start(toolBarFont, false, false, 0)
      @vbox.pack_start(@hbox, true, true, 0)
      @hbox.pack_start(hpaned ,true, true, 0)
      treeView_create
      hpaned.pack1(@treeview, true, false)
      hpaned.pack2(hpaned2, true, true)
      hpaned2.pack1(tab_param_sender, true, true)
      hpaned2.pack2(man_view, true, false)
      @win.add(@vbox)
      @win.show_all     
  end
  
  # yeni tab icin parametreleri gonderme  
  def tab_param_sender

    o = AddRemoveTab.new
    o.new_tab(@tab, @treeview, @view_but)
    return @tab
  end

  def menuBar      
     mb = Gtk::MenuBar.new
     filemenu = Gtk::Menu.new
     filemenuitem = Gtk::MenuItem.new(_("File"))
     filemenuitem.set_submenu(filemenu)
     open = Gtk::MenuItem.new(_("Open"))
     new = Gtk::MenuItem.new(_("New"))
     save = Gtk::MenuItem.new(_("Save"))
     save_as = Gtk::MenuItem.new(_("Save as"))
     make_html = Gtk::MenuItem.new(_("Convert to html file"))
     new_tab = Gtk::MenuItem.new(_("New Tab"))
     removetab = Gtk::MenuItem.new(_("Remove Tab"))
     exit_ = Gtk::MenuItem.new(_("Quit"))
     filemenu.append(open)    
     filemenu.append(new) 
     filemenu.append(save) 
     filemenu.append(save_as)
     filemenu.append(new_tab)
     filemenu.append(removetab)
     filemenu.append(make_html)
     filemenu.append(exit_)
     mb.append(filemenuitem)
     # edit menu
     editmenu = Gtk::Menu.new
     editmenuitem = Gtk::MenuItem.new(_("Edit"))
     editmenuitem.set_submenu(editmenu)
     copy = Gtk::MenuItem.new(_("Copy"))
     cut = Gtk::MenuItem.new(_("Cut"))
     paste = Gtk::MenuItem.new(_("Paste"))
     find = Gtk::MenuItem.new(_("Find"))
     replace = Gtk::MenuItem.new(_("Replace"))
     editmenu.append(copy)
     editmenu.append(paste)
     editmenu.append(cut)
     editmenu.append(find)
     editmenu.append(replace)
     mb.append(editmenuitem)    
     # setting menu
     settingmenu = Gtk::Menu.new
     settingmenuitem = Gtk::MenuItem.new(_("Settings"))
     settingmenuitem.set_submenu(settingmenu)
     mb.append(settingmenuitem)
     imenu = Gtk::Menu.new
     lang = Gtk::MenuItem.new(_("Languages"))
     lang.set_submenu(imenu)
     en = Gtk::MenuItem.new(_("English"))
     tr = Gtk::MenuItem.new(_("Turkish"))
     imenu.append(tr)
     imenu.append(en)
     settingmenu.append(lang)
     # about
     aboutmenu = Gtk::Menu.new
     aboutmenuitem = Gtk::MenuItem.new(_("About"))
     aboutmenuitem.set_submenu(aboutmenu)
     app_about = Gtk::MenuItem.new(_("About RManEdit"))
     aboutmenu.append(app_about)
     # help 
     helpmenuitem = Gtk::MenuItem.new(_("Help"))
     aboutmenu.append(helpmenuitem)     
     mb.append(aboutmenuitem)
     # file
     open.signal_connect("activate"){o=Utils.new; 
     o.open_file(@tab, @treeview, @view_but); @win.show_all}
     new.signal_connect("activate"){o=Utils.new; 
     o.open_new_empty_file(@tab, @treeview, @view_but);
     @win.show_all}
     save.signal_connect("activate"){o=Utils.new; 
     o.save(@tab, false)}
     save_as.signal_connect("activate"){o=Utils.new; 
     o.save_as(@tab, true)}
     exit_.signal_connect("activate"){Gtk.main_quit}
     make_html.signal_connect("activate"){o=Utils.new; 
     o.create_html_file(@tab)}
     new_tab.signal_connect("activate"){tab_param_sender; 
     @win.show_all}
     removetab.signal_connect("activate"){o=AddRemoveTab.new; 
     o.remove_tab(@tab); @win.show_all}
     # settings
     en.signal_connect("activate"){o=Utils.new; 
     o.lang_choice(@win,"en")}
     tr.signal_connect("activate"){o=Utils.new;
     o.lang_choice(@win,"tr")}
     # about
     app_about.signal_connect("activate"){o=Utils.new; o.app_about}
     helpmenuitem.signal_connect("activate"){o=Utils.new; o.help}
     # edit
     copy.signal_connect("activate"){o=TextManiplation.new; 
     o.copy_text(@tab)}
     paste.signal_connect("activate"){o=TextManiplation.new; 
     o.paste_text(@tab)}
     cut.signal_connect("activate"){o=TextManiplation.new; 
     o.cut_text(@tab)}
     find.signal_connect("activate"){o=TextManiplation.new; 
     o.find_text(@tab)} 
     return mb
  end

  # dosya islemleri icin
  def toolBar
    toolbar = Gtk::Toolbar.new
    toolbar.set_toolbar_style(Gtk::Toolbar::Style::ICONS)
    toolbar.set_size_request(60, 50)
    newtb = Gtk::ToolButton.new(Gtk::Stock::NEW)
    opentb = Gtk::ToolButton.new(Gtk::Stock::OPEN)
    savetb = Gtk::ToolButton.new(Gtk::Stock::SAVE)
    saveastb = Gtk::ToolButton.new(Gtk::Stock::SAVE_AS)
    cuttb = Gtk::ToolButton.new(Gtk::Stock::CUT)
    copytb = Gtk::ToolButton.new(Gtk::Stock::COPY)
    pastetb = Gtk::ToolButton.new(Gtk::Stock::PASTE)
    @view_but = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/preview3.png"))
    @view_but.set_size_request(60,40)
    tip = Gtk::Tooltips.new
    tip.set_tip(newtb,_("New"),nil)
    tip.set_tip(opentb, _("Open"),nil)
    tip.set_tip(savetb,_("Save"),nil)
    tip.set_tip(saveastb,_("Save as"),nil)
    tip.set_tip(cuttb, _("Cut"),nil)
    tip.set_tip(copytb,_("Copy"),nil)
    tip.set_tip(pastetb,_("Paste"),nil)
    tip.set_tip(@view_but, _("Preview"),nil)
    toolbar.insert(0, newtb)
    toolbar.insert(1, opentb)
    toolbar.insert(2, savetb)
    toolbar.insert(3,saveastb)
    toolbar.insert(4, cuttb)
    toolbar.insert(5, copytb)
    toolbar.insert(6, pastetb)
    toolbar.insert(7,@view_but)
    @view_but.set_sensitive false       
    opentb.signal_connect("clicked"){o = Utils.new; 
    o.open_file(@tab, @treeview, @view_but); @win.show_all}
    saveastb.signal_connect("clicked"){o = Utils.new; o.save_as(@tab, true)}
    savetb.signal_connect("clicked"){o = Utils.new; o.save(@tab, false)}
    cuttb.signal_connect("clicked"){o = TextManiplation.new; o.cut_text(@tab)}
    copytb.signal_connect("clicked"){o = TextManiplation.new; o.copy_text(@tab)}
    pastetb.signal_connect("clicked"){o= TextManiplation.new; o.paste_text(@tab)}
    newtb.signal_connect("clicked"){o= Utils.new; 
    o.open_new_empty_file(@tab, @treeview, @view_but)
    @win.show_all}
    @view_but.signal_connect("clicked"){o = Utils.new; o.preview(@tab, @manview)}
    return toolbar
  end
  
  def toolBarFont
    tbFont = Gtk::Toolbar.new
    tbFont.set_size_request(60, 50)
    t1 = Gtk::Tooltips.new
    tbFont.set_toolbar_style(Gtk::Toolbar::Style::ICONS)
    italik = Gtk::ToolButton.new(Gtk::Stock::ITALIC)
    bold = Gtk::ToolButton.new(Gtk::Stock::BOLD)
    indent = Gtk::ToolButton.new(Gtk::Stock::INDENT)
    justify_left = Gtk::ToolButton.new(Gtk::Stock::JUSTIFY_LEFT)
    br = Gtk::ToolButton.new(Gtk::Stock::JUMP_TO)
    paragraph = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/paragraph.png"))
    comment_line = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/comment_line.png"))
    set_coloumn = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/coloumns.png"))
    start_indent_paragraph = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/paragraph_indent.png"))
    nofill = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/nf.png"))
    fill = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/fi.png"))
    hp = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/hp.png"))
    subhead = Gtk::ToolButton.new(Gtk::Image.new("/usr/share/pixmaps/images/subhead.png"))
    t1.set_tip(italik,_("Italic\n .I"),nil)
    t1.set_tip(bold,_("Bold\n .B"),nil)
    t1.set_tip(indent,_("Indention\n .RE"),nil)
    t1.set_tip(justify_left,_("Subhead and justify left\n .SH"),nil)
    t1.set_tip(br,_("Jump to the bottom line\n .br"),nil)
    t1.set_tip(paragraph,_("Paragraph\n .P"),nil)
    t1.set_tip(comment_line,_("Comment line\n .\\\""),nil)
    t1.set_tip(set_coloumn,_("Seperate to coloumns\n .TP"),nil)
    t1.set_tip(start_indent_paragraph,_("Start indent on paragraph\n .IP"),nil)
    t1.set_tip(nofill,_("Nofill\n .nf"),nil)
    t1.set_tip(fill,_("Fill\n .fi"),nil)
    t1.set_tip(hp,_("First indent after line\n .HP"),nil)
    t1.set_tip(subhead,_("Subhead\n .SS"),nil)
    tbFont.insert(0,italik)
    tbFont.insert(1,bold)
    tbFont.insert(2,indent)
    tbFont.insert(3,justify_left)
    tbFont.insert(4,br)
    tbFont.insert(5,paragraph)
    tbFont.insert(6,comment_line)
    tbFont.insert(7,set_coloumn)
    tbFont.insert(8,start_indent_paragraph)
    tbFont.insert(9,nofill)
    tbFont.insert(10,fill)
    tbFont.insert(11,hp)
    tbFont.insert(12,subhead)
    italik.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".I")}

    bold.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".B ")}

    indent.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".RE ")}

    justify_left.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".SH ")}

    br.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".br\n")}
 
    paragraph.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".P ")}
   
    comment_line.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".\\\" ")}

    set_coloumn.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".TP\n")}

    start_indent_paragraph.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".IP ")}

    nofill.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".nf ")}

    fill.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".fi ")}

    hp.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".HP ")}

    subhead.signal_connect("clicked"){buf = @tab.get_nth_page(@tab.page).child;
    buf.insert_at_cursor(".SS ")}

    return tbFont
  end
 
  def files_save?
    
    pagenum = @tab.n_pages - 1

    while pagenum >= 0
      # dosya kayitli mi kontrol
      if not @tab.get_nth_page(pagenum).child.saved      
        dialog = Gtk::MessageDialog.new(nil,
        Gtk::Dialog::MODAL,
        Gtk::MessageDialog::QUESTION,
        Gtk::MessageDialog::BUTTONS_YES_NO,
        _("Your changes will be lost. Do you want continue?"))
        if dialog.run == Gtk::Dialog::RESPONSE_YES
          dialog.destroy
          return false
        else
          dialog.destroy
          return true 
        end
      end
    pagenum -= 1
    end
  end
  
end

app = Editor.new
Gtk.main
